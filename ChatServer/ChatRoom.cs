using Mikejzx.ChatShared;

namespace Mikejzx.ChatServer
{
    public class ChatRoom
    {
        // Owner of the room.  Null if the server owns it.
        public ChatServerClient? owner;

        // Name of the room
        public string name;

        // Room topic.
        public string topic;

        // Users in the room.
        public List<ChatServerClient> clients = new List<ChatServerClient>();

        // Whether the room is encrypted.
        //
        // Note that the server never actually sees the private key; the key
        // is generated by the clients through a password that they should each
        // know.  This is a form of end-to-end encryption.
        public bool isEncrypted;

        // True if the room is a 'global room' managed by the server.
        private bool m_IsGlobal;
        public bool IsGlobal { get => m_IsGlobal; }

        // Room message history
        private List<ChatMessage> m_Messages;
        public List<ChatMessage> Messages { get => m_Messages; }

        public ChatRoom(ChatServerClient? owner, string name, string topic, bool isEncrypted=false, bool isGlobal=false)
        {
            this.owner = owner;
            this.name = name;
            this.topic = topic;
            this.isEncrypted = isEncrypted;

            this.m_IsGlobal = isGlobal;
            this.m_Messages = new List<ChatMessage>();

            clients.Clear();

            // Add the owner to the clients list.
            if (owner is not null)
            {
                clients.Add(owner);

                Messages.Add(new ChatMessage(ChatMessageType.RoomCreated, owner.Nickname));

                // Append current topic message.
                if (!string.IsNullOrEmpty(topic))
                    Messages.Add(new ChatMessage(ChatMessageType.RoomTopicSet, owner.Nickname, topic));

                // Append owner join message
                Messages.Add(new ChatMessage(ChatMessageType.UserJoinRoom, owner.Nickname));
            }
        }
    }
}
